'''
This parser analyze all the data from a month and it will create a folder for each day that contains a file for each
junction. The structure of this file is the same of the original file but we'll keep only the detectors that have a
"location information" (i.e. they exist in the file generated by scot_parser.py).
'''

import pandas as pd
import os
import time

# Choose the days to parse
start = input("From: ")
to = input('To: ')
detectorList = input('Detector List: ')
dl = pd.read_csv(str(detectorList) + '.csv', sep=',', header=None)
dectData = dl.values
s = set([])

# Create a set of detectors that have a "location information"
for l in range(0, dectData.shape[0]):
    if dectData[l, 5] not in s:
        dect = dectData[l, 5]
        toAdd = dect[1:]
        s.add(toAdd)

for k in range(int(start), int(to)):

    df = pd.read_csv(str(k) + '.csv', sep='|',  header=None)
    data = df.values
    x = 0
    start_time = time.time()

    for i in range(0, data.shape[0]):
        # In the first iteration we need to create the folder
        if i == 0:
            newdir = os.path.join(os.getcwd(), str(k))
            os.mkdir(newdir)
        # Debug Print
        if i == x:
            print(str(x) + '- Parsing - Please Wait')
            x += 100000
        id = data[i, 0]
        # Keep only the detectors that have a "location information"
        if id in s:
            junction = id[:6]
            junction = junction.replace("/", "-")
            dir = os.path.join(str(k), junction + ".csv")
            toWrite = ''
            for j in range(0, data.shape[1]):
                if j == data.shape[1] - 1:
                    toWrite += str(data[i, j])
                else:
                    toWrite = toWrite + str(data[i, j]) + '|'

            f = open(dir, "a")
            f.write(toWrite + '\n')
            f.close()

    print('All file parsed!')
    totalTime = (time.time() - start_time)/60
    print("--- %s minutes ---" % totalTime)
    print('Last parsed: ' + str(k))